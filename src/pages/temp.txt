import React, { useState } from 'react';

const FitnessTracker = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [profileDropdownOpen, setProfileDropdownOpen] = useState(false);
  
  // Sample user data
  const userData = {
    name: "Alex Johnson",
    stats: {
      calories: 1240,
      workouts: 3
    },
    goals: {
      calories: 1800,
      workouts: 5
    },
    recentExercises: [
      { id: 1, name: "Bench Press", sets: 3, reps: 10, weight: "135 lbs", date: "Today" },
      { id: 2, name: "Squats", sets: 4, reps: 8, weight: "185 lbs", date: "Yesterday" },
      { id: 3, name: "Pull-ups", sets: 3, reps: 12, weight: "Body weight", date: "Feb 24" }
    ]
  };

  // Sample monthly logs data (past month)
  const monthlyLogs = [
    { id: 1, date: "Feb 27", type: "Cardio", duration: "32 min", calories: 320 },
    { id: 2, date: "Feb 26", type: "Strength", duration: "45 min", calories: 280 },
    { id: 3, date: "Feb 24", type: "Cardio", duration: "60 min", calories: 450 },
    { id: 4, date: "Feb 22", type: "Strength", duration: "50 min", calories: 310 },
    { id: 5, date: "Feb 20", type: "Cardio", duration: "35 min", calories: 340 },
    { id: 6, date: "Feb 18", type: "Strength", duration: "40 min", calories: 260 },
    { id: 7, date: "Feb 16", type: "Cardio", duration: "45 min", calories: 380 },
    { id: 8, date: "Feb 14", type: "Strength", duration: "55 min", calories: 320 },
    { id: 9, date: "Feb 11", type: "Cardio", duration: "30 min", calories: 290 },
    { id: 10, date: "Feb 9", type: "Strength", duration: "60 min", calories: 350 },
    { id: 11, date: "Feb 7", type: "Cardio", duration: "40 min", calories: 360 },
    { id: 12, date: "Feb 5", type: "Strength", duration: "45 min", calories: 300 },
    { id: 13, date: "Feb 2", type: "Cardio", duration: "50 min", calories: 410 },
    { id: 14, date: "Jan 31", type: "Strength", duration: "40 min", calories: 270 },
    { id: 15, date: "Jan 29", type: "Cardio", duration: "35 min", calories: 330 }
  ];

  // AI-generated daily challenge
  const aiChallenge = {
    title: "Push-Pull Super Set",
    description: "Alternate between push-ups and pull-ups with minimal rest for maximum muscle engagement.",
    points: 150
  };

  // AI-generated fitness tips
  const aiTips = [
    {
      title: "Recovery Importance",
      content: "Quality sleep and proper nutrition are just as important as your workouts for muscle growth and recovery."
    },
    {
      title: "Progressive Overload",
      content: "Gradually increasing weight, reps, or sets over time is key to continued strength development."
    }
  ];

  // Toggle profile dropdown
  const toggleProfileDropdown = () => {
    setProfileDropdownOpen(!profileDropdownOpen);
  };

  // Profile dropdown menu items
  const profileMenuItems = [
    { id: 'account', label: 'Account Settings', icon: 'M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z' },
    { id: 'diet', label: 'Diet Plan', icon: 'M3 3a1 1 0 000 2h11a1 1 0 100-2H3zM3 7a1 1 0 000 2h5a1 1 0 000-2H3zM3 11a1 1 0 100 2h4a1 1 0 100-2H3zM13 16a1 1 0 102 0v-5.586l1.293 1.293a1 1 0 001.414-1.414l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 101.414 1.414L13 10.414V16z' },
    { id: 'workout', label: 'Workout Plan', icon: 'M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2' },
    { id: 'logout', label: 'Logout', icon: 'M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1' }
  ];

  // Calculate progress percentages
  const calculateProgress = (current, goal) => {
    return Math.min(Math.round((current / goal) * 100), 100);
  };

  // Render content based on active tab
  const renderContent = () => {
    if (activeTab === 'dashboard') {
      return renderDashboard();
    } else if (activeTab === 'logs') {
      return renderLogs();
    } else {
      return (
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold">Coming Soon</h2>
          <p className="text-gray-600 mt-2">This feature is under development.</p>
        </div>
      );
    }
  };

  // Dashboard content
  const renderDashboard = () => {
    return (
      <>
        {/* Welcome Section */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-semibold">Welcome back, {userData.name}!</h2>
            <button className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700">
              Start Workout
            </button>
          </div>
          <p className="text-gray-600">
            You're making great progress toward your fitness goals. Keep up the good work!
          </p>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          {/* Calories */}
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex justify-between items-center mb-2">
              <h3 className="font-medium text-gray-500">Calories</h3>
              <svg className="w-5 h-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 14v6m-3-3h6M6 10h2a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2zm10 0h2a2 2 0 002-2V6a2 2 0 00-2-2h-2a2 2 0 00-2 2v2a2 2 0 002 2zM6 20h2a2 2 0 002-2v-2a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2z" />
              </svg>
            </div>
            <div className="flex items-end space-x-2">
              <span className="text-3xl font-bold">{userData.stats.calories.toLocaleString()}</span>
              <span className="text-gray-500">/ {userData.goals.calories.toLocaleString()}</span>
            </div>
            <div className="mt-4 w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-red-500 h-2 rounded-full" 
                style={{ width: `${calculateProgress(userData.stats.calories, userData.goals.calories)}%` }}
              ></div>
            </div>
          </div>

          {/* Workouts */}
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex justify-between items-center mb-2">
              <h3 className="font-medium text-gray-500">Workouts</h3>
              <svg className="w-5 h-5 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
              </svg>
            </div>
            <div className="flex items-end space-x-2">
              <span className="text-3xl font-bold">{userData.stats.workouts}</span>
              <span className="text-gray-500">/ {userData.goals.workouts}</span>
            </div>
            <div className="mt-4 w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-purple-500 h-2 rounded-full" 
                style={{ width: `${calculateProgress(userData.stats.workouts, userData.goals.workouts)}%` }}
              ></div>
            </div>
          </div>
        </div>

        {/* Recent Exercises */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Recent Exercises</h2>
            <button 
              className="text-indigo-600 hover:text-indigo-800"
              onClick={() => setActiveTab('logs')}
            >
              View All
            </button>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="border-b">
                <tr>
                  <th className="text-left pb-2">Exercise</th>
                  <th className="text-left pb-2">Sets</th>
                  <th className="text-left pb-2">Reps</th>
                  <th className="text-left pb-2">Weight</th>
                  <th className="text-left pb-2">Date</th>
                </tr>
              </thead>
              <tbody>
                {userData.recentExercises.map((exercise) => (
                  <tr key={exercise.id} className="border-b">
                    <td className="py-3">{exercise.name}</td>
                    <td className="py-3">{exercise.sets}</td>
                    <td className="py-3">{exercise.reps}</td>
                    <td className="py-3">{exercise.weight}</td>
                    <td className="py-3">{exercise.date}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="font-semibold mb-3">Start Activity</h3>
            <div className="grid grid-cols-2 gap-3">
              <button className="bg-blue-100 text-blue-700 p-3 rounded-md hover:bg-blue-200 flex flex-col items-center">
                <svg className="w-6 h-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
                Cardio
              </button>
              <button className="bg-red-100 text-red-700 p-3 rounded-md hover:bg-red-200 flex flex-col items-center">
                <svg className="w-6 h-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
                </svg>
                Strength
              </button>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="font-semibold mb-3">Daily Challenge</h3>
            <div className="bg-indigo-50 rounded-md p-4">
              <h4 className="font-medium mb-2">{aiChallenge.title}</h4>
              <p className="text-sm text-gray-600 mb-3">{aiChallenge.description}</p>
              <button className="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700">
                Start Challenge • {aiChallenge.points} pts
              </button>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="font-semibold mb-3">Fitness Tips</h3>
            <div className="text-sm space-y-4">
              {aiTips.map((tip, index) => (
                <div key={index}>
                  <h4 className="font-medium">{tip.title}</h4>
                  <p className="text-gray-600">{tip.content}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </>
    );
  };

  // Logs content
  const renderLogs = () => {
    return (
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-semibold">Activity Logs</h2>
          <div className="flex items-center space-x-2">
            <button className="bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded-md text-gray-600">
              Filter
            </button>
            <button className="bg-indigo-600 text-white px-3 py-1 rounded-md hover:bg-indigo-700">
              Add Workout
            </button>
          </div>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-medium mb-2">Past Month Summary</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-gray-50 p-4 rounded-md">
              <p className="text-gray-500">Total Workouts</p>
              <p className="text-2xl font-bold">{monthlyLogs.length}</p>
            </div>
            <div className="bg-gray-50 p-4 rounded-md">
              <p className="text-gray-500">Cardio Sessions</p>
              <p className="text-2xl font-bold">{monthlyLogs.filter(log => log.type === "Cardio").length}</p>
            </div>
            <div className="bg-gray-50 p-4 rounded-md">
              <p className="text-gray-500">Strength Sessions</p>
              <p className="text-2xl font-bold">{monthlyLogs.filter(log => log.type === "Strength").length}</p>
            </div>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 border-b border-gray-200">
              <tr>
                <th className="py-3 px-4 text-left">Date</th>
                <th className="py-3 px-4 text-left">Type</th>
                <th className="py-3 px-4 text-left">Duration</th>
                <th className="py-3 px-4 text-left">Calories</th>
                <th className="py-3 px-4 text-left">Actions</th>
              </tr>
            </thead>
            <tbody>
              {monthlyLogs.map((log) => (
                <tr key={log.id} className="border-b border-gray-200 hover:bg-gray-50">
                  <td className="py-3 px-4">{log.date}</td>
                  <td className="py-3 px-4">
                    <span className={`px-2 py-1 rounded-full text-xs ${log.type === "Cardio" ? "bg-blue-100 text-blue-800" : "bg-red-100 text-red-800"}`}>
                      {log.type}
                    </span>
                  </td>
                  <td className="py-3 px-4">{log.duration}</td>
                  <td className="py-3 px-4">{log.calories}</td>
                  <td className="py-3 px-4">
                    <div className="flex space-x-2">
                      <button className="text-gray-500 hover:text-indigo-600">
                        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                        </svg>
                      </button>
                      <button className="text-gray-500 hover:text-red-600">
                        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex justify-between items-center">
          <div className="text-gray-500 text-sm">
            Showing 15 of 15 entries
          </div>
          <div className="flex space-x-1">
            <button className="px-3 py-1 border rounded-md bg-gray-50 text-gray-500">Previous</button>
            <button className="px-3 py-1 border rounded-md bg-indigo-600 text-white">1</button>
            <button className="px-3 py-1 border rounded-md bg-gray-50 text-gray-500">Next</button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <header className="bg-indigo-600 text-white p-4">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <svg className="w-8 h-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
            <h1 className="text-xl font-bold">FitTrack</h1>
          </div>
          <div className="flex items-center space-x-4">
            <nav className="hidden md:flex space-x-4">
              <button 
                className={`px-3 py-2 rounded-md ${activeTab === 'dashboard' ? 'bg-indigo-700' : 'hover:bg-indigo-700'}`}
                onClick={() => setActiveTab('dashboard')}
              >
                Dashboard
              </button>
              <button 
                className={`px-3 py-2 rounded-md ${activeTab === 'logs' ? 'bg-indigo-700' : 'hover:bg-indigo-700'}`}
                onClick={() => setActiveTab('logs')}
              >
                Logs
              </button>
              <button 
                className={`px-3 py-2 rounded-md ${activeTab === 'nutrition' ? 'bg-indigo-700' : 'hover:bg-indigo-700'}`}
                onClick={() => setActiveTab('nutrition')}
              >
                Nutrition
              </button>
              <button 
                className={`px-3 py-2 rounded-md ${activeTab === 'progress' ? 'bg-indigo-700' : 'hover:bg-indigo-700'}`}
                onClick={() => setActiveTab('progress')}
              >
                Progress
              </button>
            </nav>
            
            {/* User Profile Dropdown */}
            <div className="relative">
              <div 
                className="flex items-center space-x-2 cursor-pointer"
                onClick={toggleProfileDropdown}
              >
                <span>Hi, {userData.name}</span>
                <div className="w-8 h-8 rounded-full bg-indigo-400 flex items-center justify-center">
                  {userData.name.charAt(0)}
                </div>
                <svg className={`w-5 h-5 transition-transform ${profileDropdownOpen ? 'transform rotate-180' : ''}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </div>
              
              {/* Dropdown Menu */}
              {profileDropdownOpen && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-10">
                  {profileMenuItems.map((item) => (
                    <button
                      key={item.id}
                      className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      onClick={() => {
                        setProfileDropdownOpen(false);
                        // Handle menu item click action here
                      }}
                    >
                      <svg className="w-5 h-5 mr-3 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d={item.icon} />
                      </svg>
                      <span className={item.id === 'logout' ? 'text-red-600' : ''}>
                        {item.label}
                      </span>
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto py-6 px-4">
        {renderContent()}
      </main>

      {/* Footer */}
      <footer className="bg-gray-800 text-white p-6 mt-12">
        <div className="container mx-auto">
          <div className="flex flex-col md:flex-row justify-between">
            <div className="mb-6 md:mb-0">
              <div className="flex items-center space-x-2">
                <svg className="w-8 h-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
                <h1 className="text-xl font-bold">FitTrack</h1>
              </div>
              <p className="mt-2 text-gray-400">Track your fitness journey with ease</p>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-8">
              <div>
                <h3 className="font-semibold mb-2">Features</h3>
                <ul className="space-y-1 text-gray-400">
                  <li>Dashboard</li>
                  <li>Logs</li>
                  <li>Nutrition</li>
                  <li>Progress</li>
                </ul>
              </div>
              <div>
                <h3 className="font-semibold mb-2">Resources</h3>
                <ul className="space-y-1 text-gray-400">
                  <li>Help Center</li>
                  <li>Blog</li>
                  <li>Fitness Tips</li>
                  <li>Community</li>
                </ul>
              </div>
              <div>
                <h3 className="font-semibold mb-2">Company</h3>
                <ul className="space-y-1 text-gray-400">
                  <li>About Us</li>
                  <li>Careers</li>
                  <li>Contact</li>
                  <li>Privacy Policy</li>
                </ul>
              </div>
            </div>
          </div>
          <div className="mt-8 pt-6 border-t border-gray-700 text-gray-400 text-sm">
            <p>© 2025 FitTrack. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default FitnessTracker;


//SQL
-- Drop existing FKs
ALTER TABLE exercise_weight_logs 
  DROP FOREIGN KEY FK_Exercise,
  DROP FOREIGN KEY user_id;

-- Recreate them
ALTER TABLE exercise_weight_logs
  ADD CONSTRAINT FK_User
  FOREIGN KEY (user_id) REFERENCES users(id),

  ADD CONSTRAINT FK_Exercise
  FOREIGN KEY (exercise_id) REFERENCES exercises(id);